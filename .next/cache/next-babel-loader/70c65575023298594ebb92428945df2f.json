{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Descargas\\\\crmcliente\\\\crmcliente\\\\components\\\\pedidos\\\\AsignarCliente.js\";\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query obtenerClientesVendedor {\\n    obtenerClientesVendedor {\\n      id\\n      nombre\\n      apellido\\n      empresa\\n      email\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport Select from \"react-select\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport PedidoContext from \"../../context/pedidos/PedidoContext\";\nvar OBTENER_CLIENTES_USUARIO = gql(_templateObject());\n\nvar AsignarCliente = function AsignarCliente() {\n  var _useState = useState([]),\n      cliente = _useState[0],\n      setCliente = _useState[1];\n\n  var pedidoContext = useContext(PedidoContext);\n  var agregarCliente = pedidoContext.agregarCliente;\n\n  var _useQuery = useQuery(OBTENER_CLIENTES_USUARIO),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  useEffect(function () {\n    agregarCliente(cliente);\n  }, [cliente]);\n\n  var seleccionarCliente = function seleccionarCliente(clientes) {\n    setCliente(clientes);\n  };\n\n  if (loading) return null;\n  var obtenerClientesVendedor = data.obtenerClientesVendedor;\n  return __jsx(React.Fragment, null, __jsx(\"p\", {\n    className: \"mt-10 my-2 bg-white border-l-4 border-gray-800 text-gray-700 p-2 text-sm font-bold\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, \"1.- Asigna un Cliente al pedido\"), __jsx(Select, {\n    className: \"mt-3\",\n    options: obtenerClientesVendedor,\n    onChange: function onChange(opcion) {\n      return seleccionarCliente(opcion);\n    },\n    getOptionValue: function getOptionValue(opciones) {\n      return opciones.id;\n    },\n    getOptionLabel: function getOptionLabel(opciones) {\n      return opciones.nombre;\n    },\n    placeholder: \"Busque o Seleccione el Cliente\",\n    noOptionsMessage: function noOptionsMessage() {\n      return \"No hay resultados\";\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AsignarCliente;","map":{"version":3,"sources":["D:/Descargas/crmcliente/crmcliente/components/pedidos/AsignarCliente.js"],"names":["React","useState","useEffect","useContext","Select","gql","useQuery","PedidoContext","OBTENER_CLIENTES_USUARIO","AsignarCliente","cliente","setCliente","pedidoContext","agregarCliente","data","loading","error","seleccionarCliente","clientes","obtenerClientesVendedor","opcion","opciones","id","nombre"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AAEA,IAAMC,wBAAwB,GAAGH,GAAH,mBAA9B;;AAYA,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA,kBACGR,QAAQ,CAAC,EAAD,CADX;AAAA,MACpBS,OADoB;AAAA,MACXC,UADW;;AAG3B,MAAMC,aAAa,GAAGT,UAAU,CAACI,aAAD,CAAhC;AAH2B,MAInBM,cAJmB,GAIAD,aAJA,CAInBC,cAJmB;;AAAA,kBAMMP,QAAQ,CAACE,wBAAD,CANd;AAAA,MAMnBM,IANmB,aAMnBA,IANmB;AAAA,MAMbC,OANa,aAMbA,OANa;AAAA,MAMJC,KANI,aAMJA,KANI;;AAQ3Bd,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,cAAc,CAACH,OAAD,CAAd;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;AAIA,MAAMO,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACvCP,IAAAA,UAAU,CAACO,QAAD,CAAV;AACD,GAFD;;AAIA,MAAIH,OAAJ,EAAa,OAAO,IAAP;AAhBc,MAkBnBI,uBAlBmB,GAkBSL,IAlBT,CAkBnBK,uBAlBmB;AAoB3B,SACE,4BACE;AAAG,IAAA,SAAS,EAAC,oFAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,EAIE,MAAC,MAAD;AACE,IAAA,SAAS,EAAC,MADZ;AAEE,IAAA,OAAO,EAAEA,uBAFX;AAGE,IAAA,QAAQ,EAAE,kBAACC,MAAD;AAAA,aAAYH,kBAAkB,CAACG,MAAD,CAA9B;AAAA,KAHZ;AAIE,IAAA,cAAc,EAAE,wBAACC,QAAD;AAAA,aAAcA,QAAQ,CAACC,EAAvB;AAAA,KAJlB;AAKE,IAAA,cAAc,EAAE,wBAACD,QAAD;AAAA,aAAcA,QAAQ,CAACE,MAAvB;AAAA,KALlB;AAME,IAAA,WAAW,EAAC,gCANd;AAOE,IAAA,gBAAgB,EAAE;AAAA,aAAM,mBAAN;AAAA,KAPpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAgBD,CApCD;;AAsCA,eAAed,cAAf","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport Select from \"react-select\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport PedidoContext from \"../../context/pedidos/PedidoContext\";\n\nconst OBTENER_CLIENTES_USUARIO = gql`\n  query obtenerClientesVendedor {\n    obtenerClientesVendedor {\n      id\n      nombre\n      apellido\n      empresa\n      email\n    }\n  }\n`;\n\nconst AsignarCliente = () => {\n  const [cliente, setCliente] = useState([]);\n\n  const pedidoContext = useContext(PedidoContext);\n  const { agregarCliente } = pedidoContext;\n\n  const { data, loading, error } = useQuery(OBTENER_CLIENTES_USUARIO);\n\n  useEffect(() => {\n    agregarCliente(cliente);\n  }, [cliente]);\n\n  const seleccionarCliente = (clientes) => {\n    setCliente(clientes);\n  };\n\n  if (loading) return null;\n\n  const { obtenerClientesVendedor } = data;\n\n  return (\n    <>\n      <p className=\"mt-10 my-2 bg-white border-l-4 border-gray-800 text-gray-700 p-2 text-sm font-bold\">\n        1.- Asigna un Cliente al pedido\n      </p>\n      <Select\n        className=\"mt-3\"\n        options={obtenerClientesVendedor}\n        onChange={(opcion) => seleccionarCliente(opcion)}\n        getOptionValue={(opciones) => opciones.id}\n        getOptionLabel={(opciones) => opciones.nombre}\n        placeholder=\"Busque o Seleccione el Cliente\"\n        noOptionsMessage={() => \"No hay resultados\"}\n      />\n    </>\n  );\n};\n\nexport default AsignarCliente;\n"]},"metadata":{},"sourceType":"module"}