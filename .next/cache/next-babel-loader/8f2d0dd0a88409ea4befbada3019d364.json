{"ast":null,"code":"var _jsxFileName = \"D:\\\\Descargas\\\\crmcliente\\\\crmcliente\\\\components\\\\pedidos\\\\AsignarCliente.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useContext } from \"react\";\nimport Select from \"react-select\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport PedidoContext from \"../../context/pedidos/PedidoContext\";\nconst OBTENER_CLIENTES_USUARIO = gql`\n  query obtenerClientesVendedor {\n    obtenerClientesVendedor {\n      id\n      nombre\n      apellido\n      empresa\n      email\n    }\n  }\n`;\n\nconst AsignarCliente = () => {\n  const {\n    0: cliente,\n    1: setCliente\n  } = useState([]);\n  const pedidoContext = useContext(PedidoContext);\n  const {\n    agregarCliente\n  } = pedidoContext;\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(OBTENER_CLIENTES_USUARIO);\n  useEffect(() => {\n    agregarCliente(cliente);\n  }, [cliente]);\n\n  const seleccionarCliente = clientes => {\n    setCliente(clientes);\n  };\n\n  if (loading) return null;\n  const {\n    obtenerClientesVendedor\n  } = data;\n  return __jsx(React.Fragment, null, __jsx(\"p\", {\n    className: \"mt-10 my-2 bg-white border-l-4 border-gray-800 text-gray-700 p-2 text-sm font-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, \"1.- Asigna un Cliente al pedido\"), __jsx(Select, {\n    className: \"mt-3\",\n    options: obtenerClientesVendedor,\n    onChange: opcion => seleccionarCliente(opcion),\n    getOptionValue: opciones => opciones.id,\n    getOptionLabel: opciones => opciones.nombre,\n    placeholder: \"Busque o Seleccione el Cliente\",\n    noOptionsMessage: () => \"No hay resultados\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AsignarCliente;","map":{"version":3,"sources":["D:/Descargas/crmcliente/crmcliente/components/pedidos/AsignarCliente.js"],"names":["React","useState","useEffect","useContext","Select","gql","useQuery","PedidoContext","OBTENER_CLIENTES_USUARIO","AsignarCliente","cliente","setCliente","pedidoContext","agregarCliente","data","loading","error","seleccionarCliente","clientes","obtenerClientesVendedor","opcion","opciones","id","nombre"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AAEA,MAAMC,wBAAwB,GAAGH,GAAI;;;;;;;;;;CAArC;;AAYA,MAAMI,cAAc,GAAG,MAAM;AAC3B,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBV,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAMW,aAAa,GAAGT,UAAU,CAACI,aAAD,CAAhC;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAqBD,aAA3B;AAEA,QAAM;AAAEE,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BV,QAAQ,CAACE,wBAAD,CAAzC;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,cAAc,CAACH,OAAD,CAAd;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;AAIA,QAAMO,kBAAkB,GAAIC,QAAD,IAAc;AACvCP,IAAAA,UAAU,CAACO,QAAD,CAAV;AACD,GAFD;;AAIA,MAAIH,OAAJ,EAAa,OAAO,IAAP;AAEb,QAAM;AAAEI,IAAAA;AAAF,MAA8BL,IAApC;AAEA,SACE,4BACE;AAAG,IAAA,SAAS,EAAC,oFAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,EAIE,MAAC,MAAD;AACE,IAAA,SAAS,EAAC,MADZ;AAEE,IAAA,OAAO,EAAEK,uBAFX;AAGE,IAAA,QAAQ,EAAGC,MAAD,IAAYH,kBAAkB,CAACG,MAAD,CAH1C;AAIE,IAAA,cAAc,EAAGC,QAAD,IAAcA,QAAQ,CAACC,EAJzC;AAKE,IAAA,cAAc,EAAGD,QAAD,IAAcA,QAAQ,CAACE,MALzC;AAME,IAAA,WAAW,EAAC,gCANd;AAOE,IAAA,gBAAgB,EAAE,MAAM,mBAP1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAgBD,CApCD;;AAsCA,eAAed,cAAf","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport Select from \"react-select\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport PedidoContext from \"../../context/pedidos/PedidoContext\";\n\nconst OBTENER_CLIENTES_USUARIO = gql`\n  query obtenerClientesVendedor {\n    obtenerClientesVendedor {\n      id\n      nombre\n      apellido\n      empresa\n      email\n    }\n  }\n`;\n\nconst AsignarCliente = () => {\n  const [cliente, setCliente] = useState([]);\n\n  const pedidoContext = useContext(PedidoContext);\n  const { agregarCliente } = pedidoContext;\n\n  const { data, loading, error } = useQuery(OBTENER_CLIENTES_USUARIO);\n\n  useEffect(() => {\n    agregarCliente(cliente);\n  }, [cliente]);\n\n  const seleccionarCliente = (clientes) => {\n    setCliente(clientes);\n  };\n\n  if (loading) return null;\n\n  const { obtenerClientesVendedor } = data;\n\n  return (\n    <>\n      <p className=\"mt-10 my-2 bg-white border-l-4 border-gray-800 text-gray-700 p-2 text-sm font-bold\">\n        1.- Asigna un Cliente al pedido\n      </p>\n      <Select\n        className=\"mt-3\"\n        options={obtenerClientesVendedor}\n        onChange={(opcion) => seleccionarCliente(opcion)}\n        getOptionValue={(opciones) => opciones.id}\n        getOptionLabel={(opciones) => opciones.nombre}\n        placeholder=\"Busque o Seleccione el Cliente\"\n        noOptionsMessage={() => \"No hay resultados\"}\n      />\n    </>\n  );\n};\n\nexport default AsignarCliente;\n"]},"metadata":{},"sourceType":"module"}