{"ast":null,"code":"var _jsxFileName = \"D:\\\\Descargas\\\\crmcliente\\\\crmcliente\\\\components\\\\pedidos\\\\AsignarProductos.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useContext } from \"react\";\nimport Select from \"react-select\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport PedidoContext from \"../../context/pedidos/PedidoContext\";\nconst OBTENER_PRODUCTOS = gql`\n  query obtenerProductos {\n    obtenerProductos {\n      id\n      nombre\n      precio\n      existencia\n    }\n  }\n`;\n\nconst AsignarProductos = () => {\n  const {\n    0: productos,\n    1: setProductos\n  } = useState([]);\n  const pedidoContext = useContext(PedidoContext);\n  const {\n    agregarProducto\n  } = pedidoContext;\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(OBTENER_PRODUCTOS);\n  useEffect(() => {\n    agregarProducto(productos);\n  }, [productos]);\n\n  const seleccionarProducto = producto => {\n    setProductos(producto);\n  };\n\n  if (loading) return null;\n  const {\n    obtenerProductos\n  } = data;\n  return __jsx(React.Fragment, null, __jsx(\"p\", {\n    className: \"mt-10 my-2 bg-white border-l-4 border-gray-800 text-gray-700 p-2 text-sm font-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"2.- Selecciona o busca los productos\"), __jsx(Select, {\n    className: \"mt-3\",\n    options: obtenerProductos,\n    onChange: opcion => seleccionarProducto(opcion),\n    isMulti: true,\n    getOptionValue: opciones => opciones.id,\n    getOptionLabel: opciones => `${opciones.nombre} - ${opciones.existencia} Disponibles`,\n    placeholder: \"Busque o Seleccione el Producto\",\n    noOptionsMessage: () => \"No hay resultados\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AsignarProductos;","map":{"version":3,"sources":["D:/Descargas/crmcliente/crmcliente/components/pedidos/AsignarProductos.js"],"names":["React","useEffect","useState","useContext","Select","gql","useQuery","PedidoContext","OBTENER_PRODUCTOS","AsignarProductos","productos","setProductos","pedidoContext","agregarProducto","data","loading","error","seleccionarProducto","producto","obtenerProductos","opcion","opciones","id","nombre","existencia"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AAEA,MAAMC,iBAAiB,GAAGH,GAAI;;;;;;;;;CAA9B;;AAWA,MAAMI,gBAAgB,GAAG,MAAM;AAC7B,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BT,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAMU,aAAa,GAAGT,UAAU,CAACI,aAAD,CAAhC;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAsBD,aAA5B;AAEA,QAAM;AAAEE,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BV,QAAQ,CAACE,iBAAD,CAAzC;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,eAAe,CAACH,SAAD,CAAf;AACD,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;;AAIA,QAAMO,mBAAmB,GAAIC,QAAD,IAAc;AACxCP,IAAAA,YAAY,CAACO,QAAD,CAAZ;AACD,GAFD;;AAIA,MAAIH,OAAJ,EAAa,OAAO,IAAP;AACb,QAAM;AAAEI,IAAAA;AAAF,MAAuBL,IAA7B;AAEA,SACE,4BACE;AAAG,IAAA,SAAS,EAAC,oFAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADF,EAIE,MAAC,MAAD;AACE,IAAA,SAAS,EAAC,MADZ;AAEE,IAAA,OAAO,EAAEK,gBAFX;AAGE,IAAA,QAAQ,EAAGC,MAAD,IAAYH,mBAAmB,CAACG,MAAD,CAH3C;AAIE,IAAA,OAAO,EAAE,IAJX;AAKE,IAAA,cAAc,EAAGC,QAAD,IAAcA,QAAQ,CAACC,EALzC;AAME,IAAA,cAAc,EAAGD,QAAD,IACb,GAAEA,QAAQ,CAACE,MAAO,MAAKF,QAAQ,CAACG,UAAW,cAPhD;AASE,IAAA,WAAW,EAAC,iCATd;AAUE,IAAA,gBAAgB,EAAE,MAAM,mBAV1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAmBD,CAtCD;;AAwCA,eAAef,gBAAf","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport Select from \"react-select\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport PedidoContext from \"../../context/pedidos/PedidoContext\";\n\nconst OBTENER_PRODUCTOS = gql`\n  query obtenerProductos {\n    obtenerProductos {\n      id\n      nombre\n      precio\n      existencia\n    }\n  }\n`;\n\nconst AsignarProductos = () => {\n  const [productos, setProductos] = useState([]);\n\n  const pedidoContext = useContext(PedidoContext);\n  const { agregarProducto } = pedidoContext;\n\n  const { data, loading, error } = useQuery(OBTENER_PRODUCTOS);\n\n  useEffect(() => {\n    agregarProducto(productos);\n  }, [productos]);\n\n  const seleccionarProducto = (producto) => {\n    setProductos(producto);\n  };\n\n  if (loading) return null;\n  const { obtenerProductos } = data;\n\n  return (\n    <>\n      <p className=\"mt-10 my-2 bg-white border-l-4 border-gray-800 text-gray-700 p-2 text-sm font-bold\">\n        2.- Selecciona o busca los productos\n      </p>\n      <Select\n        className=\"mt-3\"\n        options={obtenerProductos}\n        onChange={(opcion) => seleccionarProducto(opcion)}\n        isMulti={true}\n        getOptionValue={(opciones) => opciones.id}\n        getOptionLabel={(opciones) =>\n          `${opciones.nombre} - ${opciones.existencia} Disponibles`\n        }\n        placeholder=\"Busque o Seleccione el Producto\"\n        noOptionsMessage={() => \"No hay resultados\"}\n      />\n    </>\n  );\n};\n\nexport default AsignarProductos;\n"]},"metadata":{},"sourceType":"module"}