{"version":3,"file":"static/webpack/static\\development\\pages\\editarproducto\\[pid].js.665a6a254ca18ff4b7a0.hot-update.js","sources":["webpack:///./pages/editarproducto/[pid].js"],"sourcesContent":["import React from \"react\";\nimport Layout from \"../../components/Layout\";\nimport { useRouter } from \"next/router\";\nimport { gql, useQuery, useMutation } from \"@apollo/client\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Swal from \"sweetalert2\";\n\nconst OBTENER_PRODUCTO = gql`\n  query obtenerProducto($id: ID!) {\n    obtenerProducto(id: $id) {\n      nombre\n      precio\n      existencia\n    }\n  }\n`;\n\nconst ACTUALIZAR_PRODUCTO = gql`\n  mutation actualizarProducto($id: ID!, $input: ProductoInput) {\n    actualizarProducto(id: $id, input: $input) {\n      id\n      nombre\n      existencia\n      precio\n    }\n  }\n`;\n\nconst EditarProducto = () => {\n  const router = useRouter();\n  const {\n    query: { id },\n  } = router;\n\n  const { data, loading, error } = useQuery(OBTENER_PRODUCTO, {\n    variables: {\n      id,\n    },\n  });\n\n  const [actualizarProducto] = useMutation(ACTUALIZAR_PRODUCTO);\n\n  const schemaValidacion = Yup.object({\n    nombre: Yup.string().required(\"El nombre del producto es obligatorio\"),\n    existencia: Yup.number()\n      .required(\"Agrega la cantidad disponible\")\n      .positive(\"No se aceptan números negativos\")\n      .integer(\"La existencia deben ser números enteros\"),\n    precio: Yup.number()\n      .required(\"El precio es obligatorio\")\n      .positive(\"No se aceptan números negativos\"),\n  });\n\n  if (loading) {\n    return (\n      <Layout>\n        <h1 className=\"text-2xl text-gray-800 font-light\">Editar Producto</h1>\n\n        <div className=\" animate-pulse  flex justify-center mt-5\">\n          <div className=\"w-full max-w-lg\">\n            <form className=\"bg-white shadow-md px-8 pt-6 pb-8 mb-4\">\n              <div className=\"mb-4\">\n                <label\n                  className=\"block text-gray-700 text-sm font-bold mb-2\"\n                  htmlFor=\"nombre\"\n                >\n                  Nombre\n                </label>\n\n                <input\n                  className=\"h-4 bg-gray-400 rounded w-4/6 m-5shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                  id=\"nombre\"\n                  type=\"text\"\n                  readOnly\n                />\n              </div>\n\n              <div className=\"mb-4\">\n                <label\n                  className=\"block text-gray-700 text-sm font-bold mb-2\"\n                  htmlFor=\"cantidad\"\n                >\n                  Cantidad Disponible\n                </label>\n\n                <input\n                  className=\"h-4 bg-gray-400 rounded w-4/6 m-5shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                  id=\"cantidad\"\n                  type=\"number\"\n                  readOnly\n                />\n              </div>\n\n              <div className=\"mb-4\">\n                <label\n                  className=\"block text-gray-700 text-sm font-bold mb-2\"\n                  htmlFor=\"empresa\"\n                >\n                  Precio\n                </label>\n\n                <input\n                  className=\"h-4 bg-gray-400 rounded w-4/6 m-5shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                  id=\"empresa\"\n                  type=\"text\"\n                  readOnly\n                />\n              </div>\n            </form>\n             \n          </div>\n        </div>\n      </Layout>\n    );\n  }\n  if (!data) {\n    return \"Acción no permitida\";\n  }\n\n  const actualizarInfoProducto = async (valores) => {\n    const { nombre, existencia, precio } = valores;\n    try {\n      const { data } = await actualizarProducto({\n        variables: {\n          id,\n          input: {\n            nombre,\n            existencia,\n            precio,\n          },\n        },\n      });\n\n      router.push(\"/productos\");\n\n      Swal.fire(\n        \"Correcto\",\n        \"El producto se actualizó correctamente\",\n        \"success\"\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const { obtenerProducto } = data;\n\n  return (\n    <Layout>\n      <h1 className=\"text-2xl text-gray-800 font-light\">Editar Producto</h1>\n\n      <div className=\"flex justify-center mt-5\">\n        <div className=\"w-full max-w-lg\">\n          <Formik\n            enableReinitialize\n            initialValues={obtenerProducto}\n            validationSchema={schemaValidacion}\n            onSubmit={(valores) => {\n              actualizarInfoProducto(valores);\n            }}\n          >\n            {(props) => {\n              return (\n                <form\n                  className=\"bg-white shadow-md px-8 pt-6 pb-8 mb-4\"\n                  onSubmit={props.handleSubmit}\n                >\n                  <div className=\"mb-4\">\n                    <label\n                      className=\"block text-gray-700 text-sm font-bold mb-2\"\n                      htmlFor=\"nombre\"\n                    >\n                      Nombre\n                    </label>\n\n                    <input\n                      className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                      id=\"nombre\"\n                      type=\"text\"\n                      placeholder=\"Nombre Producto\"\n                      onChange={props.handleChange}\n                      onBlur={props.handleBlur}\n                      value={props.values.nombre}\n                    />\n                  </div>\n\n                  {props.touched.nombre && props.errors.nombre ? (\n                    <div className=\"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\">\n                      <p className=\"font-bold\">Error</p>\n                      <p>{props.errors.nombre}</p>\n                    </div>\n                  ) : null}\n\n                  <div className=\"mb-4\">\n                    <label\n                      className=\"block text-gray-700 text-sm font-bold mb-2\"\n                      htmlFor=\"existencia\"\n                    >\n                      Cantidad Disponible\n                    </label>\n\n                    <input\n                      className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                      id=\"existencia\"\n                      type=\"number\"\n                      placeholder=\"Cantidad Disponible\"\n                      onChange={props.handleChange}\n                      onBlur={props.handleBlur}\n                      value={props.values.existencia}\n                    />\n                  </div>\n\n                  {props.touched.existencia && props.errors.existencia ? (\n                    <div className=\"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\">\n                      <p className=\"font-bold\">Error</p>\n                      <p>{props.errors.existencia}</p>\n                    </div>\n                  ) : null}\n\n                  <div className=\"mb-4\">\n                    <label\n                      className=\"block text-gray-700 text-sm font-bold mb-2\"\n                      htmlFor=\"precio\"\n                    >\n                      Precio\n                    </label>\n\n                    <input\n                      className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                      id=\"precio\"\n                      type=\"number\"\n                      placeholder=\"Precio Producto\"\n                      onChange={props.handleChange}\n                      onBlur={props.handleBlur}\n                      value={props.values.precio}\n                    />\n                  </div>\n\n                  {props.touched.precio && props.errors.precio ? (\n                    <div className=\"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\">\n                      <p className=\"font-bold\">Error</p>\n                      <p>{props.errors.precio}</p>\n                    </div>\n                  ) : null}\n\n                  <input\n                    type=\"submit\"\n                    className=\"bg-gray-800 w-full mt-5 p-2 text-white uppercase font-bold hover:bg-gray-900\"\n                    value=\"Guardar Cambios\"\n                  />\n                </form>\n              );\n            }}\n          </Formik>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default EditarProducto;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AACA;AAUA;AACA;AADA;AACA;AADA;AAOA;AACA;AADA;AADA;AANA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAaaA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AADA;AACA;AAJA;AAAA;AAGA;AAWA;AAEA;AAhBA;AAAA;AACA;AADA;AAAA;AAAA;AAsBA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA5FA;AAuHA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAMA;AACA;AACA;;;;A","sourceRoot":""}